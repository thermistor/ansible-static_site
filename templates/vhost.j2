#jinja2: trim_blocks: False
server {

{% if static_site_enable_https %}
  listen 443 ssl http2;
  listen [::]:443 ssl http2;

  server_name {{ static_site_site }} {{ static_site_site_aliases|join(' ') }};

  # based on https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html and
  # also https://wiki.mozilla.org/Security/Server_Side_TLS
  ssl                  on;
  ssl_certificate      {{ static_site_ssl_cert }};
  ssl_certificate_key  {{ static_site_ssl_cert_key }};
  ssl_session_timeout 1d;
  ssl_session_cache shared:SSL:10m;
  ssl_session_tickets off;

  ssl_dhparam /etc/ssl/certs/dhparam.pem;

  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
  ssl_prefer_server_ciphers off;

  add_header Strict-Transport-Security "max-age=31536000";

  # OCSP stapling
  ssl_stapling on;
  ssl_stapling_verify on;

  # verify chain of trust of OCSP response using Root CA and Intermediate certs
  ssl_trusted_certificate {{ static_site_ssl_cert_ca }};

  resolver 1.1.1.1 1.0.0.1 valid=300s;
  resolver_timeout 5s;

  {% if static_site_enable_canonical_redirect %}
  if ( $host != '{{ static_site_site }}' ) {
   rewrite ^ https://{{ static_site_site }}$request_uri? permanent;
  }
  {% endif %}
{% else %}
  listen 80;
  listen [::]:80;

  server_name {{ static_site_site }} {{ static_site_site_aliases|join(' ') }};

  {% if static_site_enable_canonical_redirect %}
  if ( $host != '{{ static_site_site }}' ) {
   rewrite ^ http://{{ static_site_site }}$request_uri? permanent;
  }
  {% endif %}
{% endif %}

  root {{ static_site_dir }};

  index index.html;

  error_page 404 /404/index.html;

  # allow letsencrypt renewal script to work
  location ~ /\.well-known {
    allow all;
    break;
  }

  # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~ /\. {
    deny all;
  }
  # Deny access to any files with a .php extension in the uploads directory
  # Works in sub-directory installs and also in multisite network
  # Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
  location ~* /.*\.php$ {
    deny all;
  }

  location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
    break;
  }

  location ~ ^/(favicon|apple-touch|mstile).*\.(ico|png)$ {
    expires    1y;
    add_header Cache-Control public;

    add_header ETag "";
    access_log off;
    break;
  }

  location ~ ^/(assets)/ {
    gzip_static on;
    expires 1y;
    add_header Cache-Control public;

    add_header ETag "";
    access_log off;
    break;
  }

  location ~* ^.+\.(js|css|svg)$ {
    expires 1y;
    add_header Cache-Control public;

    break;
  }

  # Directives to send expires headers and turn off 404 error logging.
  location ~* ^.+\.(ogg|ogv|eot|otf|woff|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|ppt|tar|mid|midi|wav|bmp|rtf)$ {
    expires 1y;
    add_header Cache-Control public;

    access_log off;
    log_not_found off;
    break;
  }

  {{ static_site_vhost_custom }}

  access_log /var/log/nginx/{{ static_site_shortname }}-access.log;
  error_log  /var/log/nginx/{{ static_site_shortname }}-error.log;

}
